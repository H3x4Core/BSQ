#!/usr/bin/python3

import os
from random import randint
import shutil
import subprocess
import sys

 # WARNING this tool sometimes generates maps with repeating characters. Remember, you have to handle this

# bsq binary settings
BSQ_PATH = '/Users/jwikiera/Gits/BSQ/bsq'
COMPILE_BSQ = False
BSQ_SOURCE_PATH = '/Users/jwikiera/Gits/BSQ/src/'

# map generator settings
MAX_X = 100
MAX_Y = 100
MAX_DENSITY = 10

# test settings
STDIN_TEST_AMOUNT = 1
FILE_READ_TEST_AMOUNT = 0
COLOR_OUTPUT = True   # useful for visualizing but might break broken output. Be sure to do a couple runs with this set to False


if COMPILE_BSQ:
    BSQ_PATH = os.path.dirname(os.path.realpath(__file__)) + '/bsq'

if len(sys.argv) > 1:
    BSQ_PATH = sys.argv[1]
if len(sys.argv) > 2:
    STDIN_TEST_AMOUNT = int(sys.argv[2])
if len(sys.argv) > 3:
    FILE_READ_TEST_AMOUNT = int(sys.argv[3])
if len(sys.argv) > 4:
    MAX_X = int(sys.argv[4])
if len(sys.argv) > 5:
    MAX_Y = int(sys.argv[5])
if len(sys.argv) > 6:
    MAX_DENSITY = int(sys.argv[6])

if (COMPILE_BSQ):
    clean()
    compile_bsq()

RED = "\033[0;31m"
CYA = "\033[0;36m"
LGR = "\033[0;92m"
LYE = "\033[0;93m"
NC = "\033[0m"

BRED = "\033[0;41m"
BDG = "\033[0;100m"
NBC = "\033[0m"

def clean():
    if os.path.exists(BSQ_PATH):
        os.remove(BSQ_PATH)
    if os.path.exists(BSQ_PATH + '.dSYM'):
        shutil.rmtree(BSQ_PATH + '.dSYM')

def add_color(): #obsolete
    fin = open('temp/header.h', 'rt')
    data = fin.read()
    data = data.replace('# define USE_COLOR 0', '# define USE_COLOR 1')
    fin.close()
    fin = open('temp/header.h', 'wt')
    fin.write(data)
    fin.close()

def compile_bsq():
    if os.path.exists('temp'):
        shutil.rmtree('temp')
    shutil.copytree(BSQ_SOURCE_PATH, 'temp')
    #add_color()
    subprocess.run(f"gcc -Wall -Wextra -Werror -fno-omit-frame-pointer -g -O0 -fstack-protector-all temp/*.c -o {BSQ_PATH}", shell=True)

def get_stdin_safe_char():
    forbidden_chars = ['"', '\\', '`', '$']
    res = chr(randint(32, 126))
    while (res in forbidden_chars):
        res = chr(randint(32, 126))
    return res

# stolen from the pdf
def gen_map(x, y, density, stdin_mode=True):
    empty_c = chr(randint(32, 126))
    wall_c = chr(randint(32, 126))
    full_c = chr(randint(32, 126))
    
    if stdin_mode:
        empty_c = get_stdin_safe_char()
        wall_c = get_stdin_safe_char()
        full_c = get_stdin_safe_char()

    print(f' -> empty: \'{BRED}{empty_c}{NC}\' ({ord(empty_c)}), wall: \'{BRED}{wall_c}{NC}\' ({ord(wall_c)}), full: \'{BRED}{full_c}{NC}\' ({ord(full_c)})')

    res = f'{y}{empty_c}{wall_c}{full_c}\n'
    for i in range(y):
        for j in range(x):
            if (randint(0, y) * 2 < density):
                res += wall_c
            else:
                res += empty_c
        res += '\n'
    return res[:len(res) - 1]

def print_result(map_, result): #prints with color
    empty_index = map_.find('\n') - 3
    wall_char = map_[empty_index + 1]
    full_char = map_[empty_index + 2]
    new_output = ''
    for i in range(len(result) - 1):
        if (result[i]) == wall_char:
            new_output += f'{RED}{wall_char}{NC}'
        elif (result[i]) == full_char:
            new_output += f'{CYA}{full_char}{NC}'
        else:
            new_output += result[i]
    print(new_output)

def test_std(amount):
    if amount > 0:
        print(f"{LGR}#############################{NC}")
        print(f"{LGR}######## STDIN TESTS ########{NC}")
    for i in range(amount):
        print(f"{LGR}#############################{NC}")
        print(f"----testing map {LYE}{i}{NC}----")
        map_ = gen_map(randint(1, MAX_X), randint(1, MAX_Y), randint(1, MAX_DENSITY))
        print("map:")
        print(f"{BDG}{map_}{NC}")
        with open('tempmap', 'w') as f:
            f.write(map_ + '\n')
        print(" -> test result:")
        if COLOR_OUTPUT:
            result = subprocess.run(f'cat tempmap | {BSQ_PATH}', capture_output=True, shell=True, text=True)
            #print(result)
            if result.stderr == 'map error\n':
                print(f'{BRED}map error{NC}')
            else:
                print_result(map_, result.stdout)
        else:
            subprocess.run(f'cat tempmap | {BSQ_PATH}', shell=True, text=True)
        os.remove('tempmap')
    print(f"{LGR}#############################{NC}")

def test_file_read(amount):
    if amount > 0:
        print(f"{LGR}#############################{NC}")
        print(f"{LGR}###### FILE READ TESTS ######{NC}")
    for i in range(amount):
        print(f"{LGR}#############################{NC}")
        print(f"----testing map {LYE}{i}{NC}----")
        map_ = gen_map(randint(1, MAX_X), randint(1, MAX_Y), randint(1, MAX_DENSITY))
        print("map:")
        print(f"{BDG}{map_}{NC}")
        with open('tempmap', 'w') as f:
            f.write(map_ + '\n')
        print(" -> test result:")
        if COLOR_OUTPUT:
            result = subprocess.run(f'{BSQ_PATH} tempmap', capture_output=True, shell=True, text=True)
            if result.stderr == 'map error\n':
                print(f'{BRED}map error{NC}')
            else:
                print_result(map_, result.stdout)
        else:
            subprocess.run(f'{BSQ_PATH} tempmap', shell=True, text=True)
        os.remove('tempmap')
    print(f"{LGR}#############################{NC}")

def main():
    test_std(STDIN_TEST_AMOUNT)
    test_file_read(FILE_READ_TEST_AMOUNT)

if __name__ == "__main__":
    main()
